3.4.1:
API Changes:
* Developers can now delete YAML Path-specified nodes via the Processor class
  using a new delete_nodes method.  This method takes a YAML Path as its sole
  positional argument and an optional keyword argument to override automatic
  detection of the seperator in the YAML Path, pathsep.  This capability had
  previously been mistakenly limited to use only from the yaml-set CLI tool.

3.4.0:
Bug Fixes:
* For the yaml-diff command-line tool, custom identity keys for specific
  records in AoHs of the RHS document were not being considered for comparison.
  Any identity key set for the whole AoH was being applied to every record in
  the set.

Enhancements:
* The yaml-get command-line tool -- and the underlying Processor::get_nodes
  method -- now retrives nodes with `null` values.  Non-JSON null results from
  yaml-get are printed using the ASCII NULL control-character (Hexadecimal 00)
  wherever encountered.  While most terminals and shells won't visibly print
  this character, it is there and can be picked up by downstream parsers of
  STDOUT.  When the output is rendered as JSON, the unquoted "null" identifier
  is used.
* The yaml-set command-line tool now enables assigning null values using a new
  --null|-N input option.
* The yaml-set command-line tool now supports assigning YAML Aliases to target
  --change|-g nodes, referencing any other node via --aliasof|-A whether it is
  already Anchored, or not.  Should the Anchor not already exist, a unique name
  will be automatically assigned.  This automatic name can controlled via
  --anchor|-H.  Setting --change|-g and --aliasof|-A to the same node along
  with a new --anchor|-H explicitly renames an existing Anchor and its Aliases.
  The same is implicitly possible by specifying --change|-g and --anchor|-H
  without --aliasof|-A.  Using these against non-YAML files merely duplicates
  the target value to the indicated --change|-g nodes.
* With a new --tag|-T auxilliary option, the yaml-set command-line tool now
  supports assigning custom YAML tags (data-type specifiers) to nodes created
  or updated during the operation.
* The yaml-merge and yaml-diff command-line tools now also handle YAML tags.
* The single-star wildcard segment translation was changed from [.!=""] to
  [.=~/.*/] which enables it to match any key or value (including empty-string
  and null).

API Changes:
* The yamlpath.func library is too big and some very useful general code has
  become attached to special-purpose classes.  As such, it's time for
  refactoring before this becomes untennable.  New, better-organized static
  classes were created under a new yamlpath.common namespace.  Since this
  would be destructive to other Python code which depends on the old
  organization, this is a heads-up.  Your existing code will continue to work
  without any changes, but only until 4.x (which is not yet planned).  Until
  then, you must update your own code to use the new static classes for the
  following functions and methods so as to avoid fatal errors down the road:
  - yamlpath.func.append_list_element
    -> yamlpath.common.Nodes.append_list_element

  - yamlpath.func.build_next_node
    -> yamlpath.common.Nodes.build_next_node

  - yamlpath.func.clone_node
    -> yamlpath.common.Nodes.clone_node

  - yamlpath.func.create_searchterms_from_pathattributes
    -> yamlpath.common.Searches.create_searchterms_from_pathattributes

  - yamlpath.func.ensure_escaped
    -> yamlpath.YAMLPath.ensure_escaped

  - yamlpath.func.escape_path_section
    -> yamlpath.YAMLPath.escape_path_section

  - yamlpath.func.get_node_anchor
    -> yamlpath.common.Anchors.get_node_anchor

  - yamlpath.func.get_yaml_data
    -> yamlpath.common.Parsers.get_yaml_data

  - yamlpath.func.get_yaml_editor
    -> yamlpath.common.Parsers.get_yaml_editor

  - yamlpath.func.get_yaml_multidoc_data
    -> yamlpath.common.Parsers.get_yaml_multidoc_data

  - yamlpath.func.make_float_node
    -> yamlpath.common.Nodes.make_float_node

  - yamlpath.func.make_new_node
    -> yamlpath.common.Nodes.make_new_node

  - yamlpath.func.search_anchor
    -> yamlpath.common.Searches.search_anchor

  - yamlpath.func.search_matches
    -> yamlpath.common.Searches.search_matches

  - yamlpath.func.stringify_dates
    -> yamlpath.common.Parsers.stringify_dates
    NOTE that this method is deprecated and will be eliminated in favor of
    using its more comprehensive replacement,
    yamlpath.common.Parsers.jsonify_yaml_data

  - yamlpath.func.unwrap_node_coords
    -> yamlpath.wrappers.nodecoords.NodeCoords.unwrap_node_coords

  - yamlpath.func.wrap_type
    -> yamlpath.common.Nodes.wrap_type

  - yamlpath.merger.Merger.combine_merge_anchors
    -> yamlpath.common.Anchors.combine_merge_anchors

  - yamlpath.merger.Merger.delete_all_comments
    -> yamlpath.common.Anchors.delete_all_comments

  - yamlpath.merger.Merger.rename_anchor
    -> yamlpath.common.Anchors.rename_anchor

  - yamlpath.merger.Merger.replace_anchor
    -> yamlpath.common.Anchors.replace_anchor

  - yamlpath.merger.Merger.scan_for_anchors
    -> yamlpath.common.Anchors.scan_for_anchors

  - yamlpath.merger.Merger.set_flow_style
    -> yamlpath.common.Anchors.set_flow_style

  Until you update your code, a deprecation warning will be printed to STDERR
  every time the yamlpath.func file is imported and the first time one of the
  relocated Merger static methods is called.  To be rid of the message, update
  your code to use the new sources of the deprecated functions/methods and
  remove every import of and from yamlpath.func.

3.3.0:
Bug Fixes:
* It was impossible to install yamlpath 3.x without first installing
  ruamel.yaml via pip for Python 3.x.  Not only has this been fixed but
  explicit tests have been created to ensure this never happens again.

Enhancements:
* A new command-line tool, yaml-diff, now compares exactly two
  YAML/JSON/Compatible documents, producing a GNU diff-like report of any
  differences in the data they present to parsers.  Along with diff's "a"
  (added), "c" (changed), and "d" (deleted) report entries, affected YAML Paths
  are printed in lieu of line numbers.  Further, a report entry of "s" (same)
  is available and can be enabled via command-line options.  This tool also
  features optional special handling of Arrays and Arrays-of-Hashes, which can
  be configured as CLI options or via an INI file for distinct settings per
  YAML Path.  See --help or the Wiki for more detail.

API Changes:
* NodeCoords now employ a new `path` attribute.  This is an optional parameter
  which is assigned during construction to later report the translated origin
  YAML Path; this is where the node was found or created within the DOM.  Note
  that Collector segments work against virtual DOMs, so the YAML Path of an
  outer Collector will be virtual, relative to its parent at construction; when
  nested, this will be a bare list index.  Any NodeCoords in the virtual
  container which point to real nodes in the DOM will have their own concrete
  YAML Paths.
* YAMLPath instances now support nonmutating addition of individual segments
  via the + operator.  Whereas the append() method mutates the YAMLPath being
  acted upon, + creates a new YAMLPath that is the original plus the new
  segment.  In both cases, the orignal YAMLPath's seperator is retained during
  both operations.  As with .append(), new segments added via + must also be
  properly escaped -- typically via path.escape_path_section -- before being
  added.

3.2.0:
Enhancements:
* Expanded YAML Path Search Expressions such that the OPERAND of a Search
  Expression may be a sub-YAML Path.  This enables searching descendent nodes
  -- without moving the document pointer -- to yield ancestors with matching
  descendants.  This has more utility when searching against Arrays-of-Hashes.

Bug Fixes:
* Date values in YAML could not be written to JSON streams; the JSON renderer
  would generate an incompatibility error.  Now, dates are written as Strings
  to JSON.  This affected: yaml-get, yaml-set (in stream mode), yaml-merge, and
  yaml-paths.

3.1.0:
Enhancements:
* yaml-set can now delete nodes when using --delete rather than other input
  arguments.
* A new command-line tool has been created, yaml-validate, which validates
  YAML/JSON/compatible single- and multi-documents (files or STDIN).

Bug Fixes:
* The yaml-merge command-line tool wasn't allowing Scalar values supplied via
  STDIN -- with no structure, just bare Scalar values -- to be appended to
  exising Array data structures; rather, it was wholly overwriting the
  destination, deleting all pre-exisiting elements.
* The yaml-merge command-line tool wasn't accepting empty-strings as STDIN
  documents; it was reporting a document-read error, instead.  This turns out
  to be useful when you want to use yaml-merge instead of yaml-set to
  deliberately write an empty-string value at some --mergeat location within
  the LHS document.
* The yaml-merge command would not accept any variation of "false" as a Scalar
  value input; it was instead reporting a document-read error.  This turns out
  to be useful when using yaml-merge as if it were yaml-set to write a false
  Boolean value to the LHS document at some --mergeat location.

API Changes:
* The func.get_yaml_data and func.get_yaml_multidoc_data functions now
  return/yield tuples.  The first field is the desired yaml_data (can be None
  for empty documents) and the second field is a Boolean which indicates True
  when the document loaded with no errors or False when an error occurred.
  This is necessary in order to accept a bare "false" Scalar value as a
  STDIN-supplied document.

3.0.0:
Enhancements:
* Added a new YAML Path Segment Type:  *
  This is identical to a Search segment where the search term is `[.!=""]`.
  This translates to "match every Hash key for which its name is not empty and
  every Array element which is not empty".  This operator also vertically
  expands results from Collectors, effectively breaking them out from an Array-
  per-line to one-Scalar-per-line.  If you place this inside a Collector, the
  results will still be collected into an Array.
* The * character now also serves as a wildcard character for key-names, Hash
  values, and Array value comparisons, converting the segment to a Search.  For
  example, a YAML Path like `abc.d*` becomes `abc[.^d]`, `abc.*f` becomes
  `abc[.$f]`, and `abc.*e*` becomes `abc[.=~/^.*e.*$/]`, and so on.
* Added a new YAML Path Segment Type:  **
  This new type is a "Traversal" segment which causes YAML Path operations to
  deeply traverse the document from that point.  When there are no further
  segments in the YAML Path, every leaf node (Scalar value) is matched.  When
  the YAML Path has at least one further segment, it (and all further segments)
  must match subsequent nodes (anywhere deeper than that point in the document)
  or none are matched.  Results can be collected.
* The yaml-merge and yaml-get command-line tools now treat the - pseudo-file as
  implicit when NOT specified AND the session is non-TTY.  This can be blocked
  with --nostdin|-S.  This enables, for example, piping into these commands
  without being forced to specify the - pseudo-file as an argument to them.
* The yaml-merge command now enables users to force the merged document to be
  written out as YAML or JSON via a new --document-format (-D) command-line
  argument.  When unset, the format will be based on the file-name extension of
  the --output file when provided, or (last-resort) that of the first document
  (AUTO).
* The yaml-merge command now accepts multi-document YAML files, created when
  the YAML standard-specified End-of-Document, Start-of-Document marker pair
  (...<EOL> followed by ---<EOL>) is present, like:
  ```yaml
  ---
  document: 1
  ...
  ---
  document: 2
  ```
* The yaml-merge command now accepts multi-document JSON files, created when
  there are multiple root-level entities, like:
  ```json
  {"document": 1}
  {"document": 2}
  ```
* Because any document to yaml-merge can be a multi-document, it no longer
  requires at least 2 YAML_FILEs be supplied on the command-line.  If users
  pass only a single file or stream that is not a multi-document file, its
  content will merely be written out without any merging into it.  This can be
  useful for trivially converting any file from YAML to JSON or JSON to YAML,
  like `yaml-merge --document-format=json file.yaml` or
  `yaml-merge --document-format=yaml file.json`.
* The `yaml-set` command-line tool can now write changes to empty or minimally-
  viable files, enabling users to build up new data files from scratch.  The
  file must already exist, even if completely empty.  A non-empty, minimally-
  viable file depends on document type.  For example:
  A minimally-viable YAML file:
  ```yaml
  ---
  # The triple-dash is required.
  ```
  Two versions of a minimally-viable JSON file:
  ```json
  {}
  ```
  or:
  ```json
  []
  ```
  However, minimally-viable structure is necessary only for files with unusual
  file-name extensions.  When the file-name extension is one of yaml, yml, or
  json (case-insensitive), the file can be completely empty and still result in
  a YAML or JSON data structure.
* The `yaml-set` command-line tool now accepts empty-String values.
* The `yaml-merge` command-line tool now permits overwriting one of its input
  files as long as `--overwrite` is used instead of `--output`; these are
  mutually-exclusive options.  To help users protect against accidental change,
  a new `--backup` flag will cause the to-be-overwritten file to be renamed
  with a ".bak" file-name extension.  A pre-existing backup file with the same
  name will be unceremoniously replaced.
* The `yaml-set` command-line tool now accepts an arbitrary set of characters
  from which to derive `--random` values via a new `--random-from` argument.
  This is especially useful when you need to limit or expand the characters
  used and when you wish to favor some characters more than others (simply
  repeat the favored characters more than other characters in the argument
  value but do so under caution because doing so reduces randomness).
* The `yaml-set` command-line tool now accepts documents from STDIN, causing it
  to write the resulting changes to STDOUT.  This enables `yaml-set` to operate
  as a stream editor, like `yaml-get` and `yaml-merge`.
* The `yaml-paths` command-line tool now accepts documents from STDIN.  It also
  now accepts multi-document YAML and JSON as file or STDIN input.  Because it
  is impossible to determine whether a file or stream contains multi-document
  data without reading through the entire file more than once, output now always
  displays the file-name (or STDIN) and -- new -- the document-index in which
  matches were found.  As before, users can turn off file-name display by
  setting --nofile|-F.  In previous, single-document versions, the file-name
  display was automatically muted when there was only one YAML_FILE to process.

Bug Fixes:
* Collectors were breaking search nodes with Regular Expressions, making it
  impossible for collected searches to return expected matches.
* Fixed the Known Issue which was logged at version 2.4.0; setting values which
  override aliased key-value pairs now correctly adds the new key-value pair to
  the DOM.
* When the left-most document was JSON, yaml-merge and yaml-set would both
  improperly write out a YAML document start mark (---) and then a hybrid
  JSON/YAML result rather than valid JSON.
* The yaml-merge command would "explode" LHS Anchored Hashes wherever they were
  aliased when the RHS document modified the same Hash into which the alias was
  used.
* Setting a Python-style Boolean value via `yaml-set` (True or False) without
  setting --format=boolean would cause an error because ruamel.yaml was
  expecting an integer, instead.  It is no longer necessary to set --format in
  this case.  However, --format=boolean can still be useful to convert more
  "Boolean like" values into true|false, like on, off, yes, no, true, false,
  True, False, 1, 0.

Non-Breaking API Changes:
* The various protected _get_* methods of Processor were changed to reduce the
  number of positional parameters while also allowing for new special-use
  parameters for future changes.  The formerly optional positional `parent` and
  `parentref` parameters are now optional keyword arguments by the same names.
  Because these were all protected methods and the affected parameters were
  optional anyway, this is not deemed a breaking change; no one should have
  been directly calling them.
* The get_yaml_editor function now supports several keyword arguments which
  provide for some customization of the returned ruamel.yaml.YAML instance.
  See its documentation for details.  This is a non-breaking change as the
  defaults for each new keyword argument set the behavior identical to what it
  was before this change.
* The get_yaml_data function now returns False rather than None when there is
  an issue attempting to load data.  This is because an empty-but-viable
  document correctly returns None but there is no valid YAML or JSON document
  which can be comprised only of a Scalar Boolean.  This is a non-breaking
  change because None and False are equivalent for code like:
  ```python
  data = get_yaml_data(get_yaml_editor(), ConsoleLogger(), "file.yaml")
  if not data:
    print("No data")
  ```
  However, you can now differentiate between "No data" and "Invalid document"
  like so:
  ```python
  data = get_yaml_data(get_yaml_editor(), ConsoleLogger(), "file.yaml")
  if data is None:
    print("No data")
  elif not data and isinstance(data, bool):
    print("Invalid document")
  else:
    print("Got a non-empty document")
  ```
* The ConsolePrinter's debug method now prints vastly more detail and allows
  for customization of the output.  Read its documentation for details.

From this release forward, the version reported by all command-line tools is
synchronized with the version of the overall yamlpath installation.

2.4.3:
Bug Fixes:
* Array-of-Hashes were not being detected for the purpose of applying merge
  rules defined via the INI-style configuration file.
* Array-of-Hashes identity key inference was looking first to the LHS document.
  This was backwards for an RHS-to-LHS merge and has been corrected.

The yaml-merge command now reports version 0.0.4 to reflect these changes.

2.4.2:
Enhancements:
* In the INI file's [rules] section, different merge rules can now be applied
  to specific parts -- no matter how deeply nested -- of the same Hash
  structure.

Bug Fixes:
* The 3rd-party Python INI file parser had no way of differentiating between
  the key and value of a YAML Path entry containing an = sign in its key, like
  "/path[.=name]/key = left".  This update reconstitutes such lines and
  correctly parses an affected YAML Path from the merge rule.

The yaml-merge command now reports version 0.0.3 to reflect these changes.

2.4.1:
Bug Fixes:
* The yaml-merge tool (and underlying Merger class) incorrectly assigned "None"
  Anchors to all floating-point numbers.  This prevented all merging when both
  the LHS and RHS documents contained at least one floating-point number, each.
  The yaml-merge command now reports version 0.0.2 to reflect this change.

2.4.0:
Enhancements:
* Added new reference command-line tool:  yaml-merge.  This is a very complex
  tool, so a comprehensive treatise will be added to the project Wiki to
  explore its capabilities.  Along with those of its component classes, its
  unit tests also provide many examples of the same.
* YAMLPath instances now support arbitrary changes to seperator.
* YAMLPath instances now support equality testing (against the stored path),
  immune to differences in seperator.
* The get_yaml_data function now supports "-" as a source file.  This is
  interpreted as a read from STDIN.
* Due to the change to the get_yaml_data function, the yaml-get reference
  command-line tool now supports retrieving nodes from YAML/Compatible data
  passed to it via STDIN when its YAML_FILE argument is set to -.  The new
  yaml-merge reference command-line tool also reads from STDIN when one of its
  YAML_FILE input arguments is -.  No other reference command-line tools
  support this change at this time.

Known Issues:
1. Neither yaml-set nor yaml-merge will add override keys to a Hash which uses
   the YAML merge operator (<<:) and which does not already have a matching
   override key.  This issue has existed for a very long time but was only
   discovered during preparation for this release.  This will be logged and
   tracked as a Known Issue for this release -- to be fixed at another time --
   because no one (not even myself) has yet encountered/reported this issue, it
   is non-trivial to fix, and it is an edge-case.  Here is an example of this
   issue:

   For ex.yaml:
   ---
   anchored_hash: &its_anchor
     ah_key: Base value
   merging_hash:
     <<: *its_anchor
     mh_key: Implementation value

   ... both of these commands:
   `yaml-set --change=/merging_hash/ah_key --value='Override value' ex.yaml`
   `echo 'Override value' | yaml-merge -m /merging_hash/ah_key ex.yaml -`

   ... will fail to affect the expected change.  The expectation would be:
   ---
   anchored_hash: &its_anchor
     ah_key: Base value
   merging_hash:
     <<: *its_anchor
     mh_key: Implementation value
     ah_key: Override value

   ... but the actual result is (without any indication of an error):
   ---
   anchored_hash: &its_anchor
     ah_key: Base value
   merging_hash:
     <<: *its_anchor
     mh_key: Implementation value

2.3.7:
Bug Fixes:
* Setting negative floats could cause the leading "-" symbol to be replaced
  with an unexpcted "0" when specifying a float format, or crash when using
  the default format.

2.3.6:
Bug Fixes:
* When using yaml-set with --format=folded and --eyamlcrypt, the encrypted
  value was being mistakenly appended with a spurious newline character at its
  end.  Note that this affected only Puppet's Hiera lookup and not EYAML
  itself; on the command-line, the eyaml command would not show the extra
  newline character.  The yaml-get command was also not affected, making it
  very difficult to set up a unit-test for this case.

2.3.5:
Bug Fixes:
* Certain YAML constructs trigger AssertionErrors in ruamel.yaml during YAML
  data writes.  This was causing yaml-set to generate empty files.  Until
  https://sourceforge.net/p/ruamel-yaml/tickets/351/ is fixed, this patch
  will revert the file contents to mitigate data loss under these conditions.
  A specific test has been created to detect when the upstream issue is fixed.

2.3.4:
Bug Fixes:
* Minor security patch:  Python already makes non-shell subprocess calls safe
  (mitigating shell command injection).  This patch makes that already-present
  protection explicit rather than implicit.

2.3.3:
Bug Fixes:
* Subtraction Collector math had no effect when the RHS was a list of scalar
  values (because LHS was a list of NodeCoords, so comparison was always
  false).  Also reduced O(3N) to O(2N) during Collector subtraction.

Enhancements:
* The console logger's debug method now includes the type of each element in a
  list while it is being dumped.

2.3.2:
Bug Fixes:
* Subtraction Collector math crashed when the RHS result was non-iterable.

2.3.1:
Bug Fixes:
* Under certain conditions, some YAML changes were affecting unexpected nodes
  which had identical original values.
* YAMLValueFormats.DEFAULT was identifying all CLI-supplied values as String
  rather than their most-likely data-type.

API COMPATIBILITY WARNING:
Previous versions of the library returned only selected data nodes.  Now,
instead of data nodes, NodeCoords objects are returned.  This is necessary in
order to resolve Issue #44, which was caused by Python over-aggressively
optimizing memory, making non-String data nodes references to any other node
with the same value.  This made changing exactly one of those data nodes
impossible because all nodes with the same original value would change with it.
Now, the NodeCoords class carries DOM tracking data along with each data
node making precise node changes possible.  However, your queries will now
return this more complex additional data.  In order to evaluate just the data,
please refer to this before-and-after example:

BEFORE:
for node in processor.get_values(yaml_path):
    do_something_with(node)

AFTER:
for node_coordinate in processor.get_values(yaml_path):
    do_something_with(node_coordinate.node)

If you need to recursively remove DOM tracking data from the results, a new
utility function is available:  func.unwrap_node_coords(data).  Note however
that you need that tracking data in order to change data within the DOM.

This does not affect the output of the sample command-line utilities.

2.3.0:
Bug Fixes:
* The get_yaml_data helper function now contains ruamel.yaml errors/warnings
  without disrupting calling context handlers.

Enhancements:
* yaml-paths version 0.2.0 now has more detailed output control, trading
  --pathonly for --values, --nofile, --noexpression, and --noyamlpath.

2.2.0:
Bug Fixes:
* YAML construction errors are now caught and more cleanly reported by all
  command-line tools.

Enhancements:
* yaml-paths version 0.1.0 now has more specific flags, enabling:
  * more precise handling of anchors in YAML data, and
  * expanding parent node results to instead return all their child leaf nodes.

2.1.1:
Bug Fixes:
* yaml-paths was recursing into nodes for which the name had already matched,
  causing unnecessary search results.  Version 0.0.2 fixes this; when a node is
  matched by name, any children are ignored because they will have already been
  yielded as the parent node's value.

2.1.0:
Enhancements:
* Added a new yaml-paths command-line tool.  In short, it enables searching
  YAML/Compatible files, returning YAML Paths for any matches.  As an Alpha-
  grade tool, it is being released at version 0.0.1.  Feedback welcome!
* All command-line tools which accept --pathsep now accept symbolic seperators
  rather than only names; so, --pathsep=/ is idental to --pathsep=fslash, etc.
  Minor changes were also made to all command-line tools to consolidate some
  repeat code.  Each has a version bump to reflect this minor refactoring
  effort.

2.0.2:
Bug Fixes:
* eyaml-rotate-keys was broken by the refactoring for 2.0.0.  eyaml-rotate-keys
  v1.0.2 restores functionality.

Enhancements:
* Command-line tools are now managed via pip as entry_points/console_scripts
  rather than external binaries.  This enables superior cross-platform
  compatibility as well as unit testing.  As such, all of the CLI tools have
  been updated pursuant to (generally trivial, excepting eyaml-rotate-keys)
  issues discovered during their newfound CI tests.

2.0.1:
Bug Fixes:
* yaml-set v1.0.4 lost track of EYAML block formatting between read and write,
  causing replacement values to use unexpected formatting.  This is fixed in
  yaml-set v.1.0.5.

2.0.0:
Enhancements:
* Added Collectors to YAML Path expressions.  These take the form of "(YAML
  Path)" -- parenthesis () are used to demarcate each Collector -- resulting in
  a list of zero or more matches for the sub-query.  Operators between
  Collectors include + and -, like "(...)+(...)", "(...)-(...)", and nested
  Collectors are possible, like "(...)-((...)+(...))".  Collectors may appear
  anywhere within the outer YAML Path, effectively setting the point within the
  data at which each Collector is rooted.
* A major code refactoring was undertaken to break YAMLPath out as its own class
  and improve code quality (per mypy and pylint).

Bug Fixes:
* yaml-set v1.0.4 now implies --mustexist when --saveto is set.  Otherwise,
  --saveto was trying to save nothing when --change (without --mustexist)
  pointed nowhere.

1.2.5:
Bug Fixes:
* yaml-set v1.0.3 no longer requires --privatekey unless decryption is requested
  via enabling --check.  As a side-effect, the script will also no longer ignore
  requests to set the same value as was already set.

1.2.4:
Bug Fixes:
* yaml-set v1.0.2 now preserves newlines for pre-folded EYAML values when saving
  the old encrypted value to another node.
* ruamel.yaml v0.15.96 is now the minimum acceptable version in order to adopt
  better round-trip editing.

1.2.3
Enhancements:
* Set minimum compatible versions of Python and ruamel.yaml in order to ensure
  users experience the expected behaviors.

1.2.2
Enhancements:
* Array element selection can now be specified by either the usual [#] notation
  or a bare integer.  Thus, the following are all identical:
  array[1]
  array.1
  /array/1

1.2.1
Enhancements:
* Some exception/error messages have been updated to print the entire original
  -- albeit parsed -- YAML Path in addition to the present segment under
  evaluation.

Bug Fixes:
* yaml-get version 1.0.2 now converts new-lines into "\n" character sequences
  when writing output so that multi-line values remain one-result-per-line.
* Use of escape symbols for unusual characters (where demarcation would usually
  be more intuitive) is now preserved.  Thus, these two search phrases are now
  identical:
    array[.%" can't "]
    array[.%\ can\'t\ ]
* The issue preventing some YAML Paths from being printable after parsing has
  been fixed.  Valid, parsed YAML Paths now correctly print into a re-parsable
  form even with weird sequences and escapes.  Note that superfluous whitespace
  and other symbols are still removed or escaped when the YAML Path is printed,
  so:
    term [ key == "Superfluous spaces aren\'t kept." ]
  correctly parses and prints as:
    term[key=Superfluous\ spaces\ aren\'t\ kept.]

1.2.0
Enhancements:
* A new search operator, :, now enables capturing slices of Arrays (by 0-based
  element number) and Hashes (by alphanumeric key-name).  This looks like:
  "some::array[2:15]" or "some::hash[beta:gamma]".
* yaml-get now returns JSON instead of "pretty Python" data objects when the
  search returns complex data types (Arrays and Hashes).  This change makes the
  result more portable to non-Python consumers and ensures the result will be
  one per line.
* The separator used for identifying Hash sub-keys can now be customized.  If
  you prefer your paths to look like "/hash/sub/key" rather than "hash.sub.key",
  you can now have it your way.  For now, only . and / are allowed.  The
  seperator can be either strictly specified or automatically inferred by
  whether the first character of a given YAML Path is /.  Command-line tools
  like yaml-get and yaml-set have a new --pathsep argument for this; the default
  is "auto" and can be set to "fslash" (/) or "dot" (.).

Bug Fixes:
* EYAML on Windows now works when a batch file is used to wrap the Ruby `eyaml`
  command.

Known Issues:
* Escape symbols in YAML Paths parse correctly and will be properly processed,
  resulting in retriving or setting the expected data.  However, the parsed
  path cannot be stringified back to its original form (with escape symbols).
  This issue affects only logging/printing of the post-parsed path.  A unit test
  has been created to track this issue, but it is marked xfail until such time
  as someone is willing to tackle this (very) low priority issue.  Until then,
  developers should try to print the pre-parsed version of their paths rather
  than rely exclusively on Parser.str_path().  Further, don't do this:
    1. Accept or take a string path that has escaped characters.
    2. Parse that path.
    3. Stringify the parsed path.
    4. Parse the stringified, parsed path.  This is silly, anyway because you
       already have the first (good) parsed result at step 2.
    5. Try to use this parsed-stringified-parsed path result for anything.
       Instead, only use the first parsed result that you got at step 2.

1.1.2
Bug fixes:
* When the YAML Path is fully quoted -- a known side-effect of using Jenkins and
  trying to responsibly quote any part of an argument to a shell command -- the
  visual feedback failed to show the user that the parsed version of the YAML
  Path was (correctly) treated as one whole KEY.  While this is not what most
  users should expect, it is correct because YAML Path cannot safely make any
  assumptions as to whether the quoting was deliberate or unintentional.  Now,
  the stringified version of affected YAML Paths very clearly injects escape
  symbols for otherwise intentional special symbols, clearly alerting the user
  that a probable issue is afoot.
* When instructed to `--save` old values, the yaml-set binary was saving only
  decrypted versions of the original values.  It now preserves the original
  encrypted form while still performing other requested or necessary tests
  against the decrypted value.

1.1.1
Bug fixes:
* The . search operand was limited to only Hash key-names; it now also enables
  searching Array elements.

1.1.0
Added support for Regular Expressions as a search mechanism against Hash keys
and values.  Also increased unit test coverage and fixed some bugs in that
effort.

1.0.0
Initial release.  All features are belived to be working as expected, backed by
comprehensive unit tests and my own in-production use of the bundled
command-line tools.  Of course, not all edge-cases can be predicted, so if you
manage to find a bug, please report it!  Feature requests are always welcome, as
well.  That said, Pull Requests are always the best way to contribute!
